// Code generated by MockGen. DO NOT EDIT.
// Source: host.go
//
// Generated by this command:
//
//	mockgen -destination mock/mock_host.go -source host.go
//

// Package mock_host is a generated GoMock package.
package mock_host

import (
	reflect "reflect"

	v1alpha1 "github.com/SchSeba/dra-driver-sriov/pkg/api/virtualfunction/v1alpha1"
	host "github.com/SchSeba/dra-driver-sriov/pkg/host"
	ghw "github.com/jaypipes/ghw"
	gomock "go.uber.org/mock/gomock"
)

// MockInterface is a mock of Interface interface.
type MockInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceMockRecorder
	isgomock struct{}
}

// MockInterfaceMockRecorder is the mock recorder for MockInterface.
type MockInterfaceMockRecorder struct {
	mock *MockInterface
}

// NewMockInterface creates a new mock instance.
func NewMockInterface(ctrl *gomock.Controller) *MockInterface {
	mock := &MockInterface{ctrl: ctrl}
	mock.recorder = &MockInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInterface) EXPECT() *MockInterfaceMockRecorder {
	return m.recorder
}

// BindDefaultDriver mocks base method.
func (m *MockInterface) BindDefaultDriver(pciAddress string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BindDefaultDriver", pciAddress)
	ret0, _ := ret[0].(error)
	return ret0
}

// BindDefaultDriver indicates an expected call of BindDefaultDriver.
func (mr *MockInterfaceMockRecorder) BindDefaultDriver(pciAddress any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BindDefaultDriver", reflect.TypeOf((*MockInterface)(nil).BindDefaultDriver), pciAddress)
}

// BindDeviceDriver mocks base method.
func (m *MockInterface) BindDeviceDriver(pciAddress string, config *v1alpha1.VfConfig) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BindDeviceDriver", pciAddress, config)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BindDeviceDriver indicates an expected call of BindDeviceDriver.
func (mr *MockInterfaceMockRecorder) BindDeviceDriver(pciAddress, config any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BindDeviceDriver", reflect.TypeOf((*MockInterface)(nil).BindDeviceDriver), pciAddress, config)
}

// BindDriverByBusAndDevice mocks base method.
func (m *MockInterface) BindDriverByBusAndDevice(device, driver string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BindDriverByBusAndDevice", device, driver)
	ret0, _ := ret[0].(error)
	return ret0
}

// BindDriverByBusAndDevice indicates an expected call of BindDriverByBusAndDevice.
func (mr *MockInterfaceMockRecorder) BindDriverByBusAndDevice(device, driver any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BindDriverByBusAndDevice", reflect.TypeOf((*MockInterface)(nil).BindDriverByBusAndDevice), device, driver)
}

// EnsureDpdkModuleLoaded mocks base method.
func (m *MockInterface) EnsureDpdkModuleLoaded(driver string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureDpdkModuleLoaded", driver)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnsureDpdkModuleLoaded indicates an expected call of EnsureDpdkModuleLoaded.
func (mr *MockInterfaceMockRecorder) EnsureDpdkModuleLoaded(driver any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureDpdkModuleLoaded", reflect.TypeOf((*MockInterface)(nil).EnsureDpdkModuleLoaded), driver)
}

// EnsureVhostModulesLoaded mocks base method.
func (m *MockInterface) EnsureVhostModulesLoaded() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureVhostModulesLoaded")
	ret0, _ := ret[0].(error)
	return ret0
}

// EnsureVhostModulesLoaded indicates an expected call of EnsureVhostModulesLoaded.
func (mr *MockInterfaceMockRecorder) EnsureVhostModulesLoaded() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureVhostModulesLoaded", reflect.TypeOf((*MockInterface)(nil).EnsureVhostModulesLoaded))
}

// GetDriverByBusAndDevice mocks base method.
func (m *MockInterface) GetDriverByBusAndDevice(device string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDriverByBusAndDevice", device)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDriverByBusAndDevice indicates an expected call of GetDriverByBusAndDevice.
func (mr *MockInterfaceMockRecorder) GetDriverByBusAndDevice(device any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDriverByBusAndDevice", reflect.TypeOf((*MockInterface)(nil).GetDriverByBusAndDevice), device)
}

// GetNicSriovMode mocks base method.
func (m *MockInterface) GetNicSriovMode(pciAddr string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNicSriovMode", pciAddr)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetNicSriovMode indicates an expected call of GetNicSriovMode.
func (mr *MockInterfaceMockRecorder) GetNicSriovMode(pciAddr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNicSriovMode", reflect.TypeOf((*MockInterface)(nil).GetNicSriovMode), pciAddr)
}

// GetNumaNode mocks base method.
func (m *MockInterface) GetNumaNode(pciAddress string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNumaNode", pciAddress)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNumaNode indicates an expected call of GetNumaNode.
func (mr *MockInterfaceMockRecorder) GetNumaNode(pciAddress any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNumaNode", reflect.TypeOf((*MockInterface)(nil).GetNumaNode), pciAddress)
}

// GetParentPciAddress mocks base method.
func (m *MockInterface) GetParentPciAddress(pciAddress string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetParentPciAddress", pciAddress)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetParentPciAddress indicates an expected call of GetParentPciAddress.
func (mr *MockInterfaceMockRecorder) GetParentPciAddress(pciAddress any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetParentPciAddress", reflect.TypeOf((*MockInterface)(nil).GetParentPciAddress), pciAddress)
}

// GetVFIODeviceFile mocks base method.
func (m *MockInterface) GetVFIODeviceFile(pciAddress string) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVFIODeviceFile", pciAddress)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetVFIODeviceFile indicates an expected call of GetVFIODeviceFile.
func (mr *MockInterfaceMockRecorder) GetVFIODeviceFile(pciAddress any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVFIODeviceFile", reflect.TypeOf((*MockInterface)(nil).GetVFIODeviceFile), pciAddress)
}

// GetVFList mocks base method.
func (m *MockInterface) GetVFList(pfPciAddress string) ([]host.VFInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVFList", pfPciAddress)
	ret0, _ := ret[0].([]host.VFInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVFList indicates an expected call of GetVFList.
func (mr *MockInterfaceMockRecorder) GetVFList(pfPciAddress any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVFList", reflect.TypeOf((*MockInterface)(nil).GetVFList), pfPciAddress)
}

// IsDpdkDriver mocks base method.
func (m *MockInterface) IsDpdkDriver(driver string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsDpdkDriver", driver)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsDpdkDriver indicates an expected call of IsDpdkDriver.
func (mr *MockInterfaceMockRecorder) IsDpdkDriver(driver any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsDpdkDriver", reflect.TypeOf((*MockInterface)(nil).IsDpdkDriver), driver)
}

// IsKernelModuleLoaded mocks base method.
func (m *MockInterface) IsKernelModuleLoaded(moduleName string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsKernelModuleLoaded", moduleName)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsKernelModuleLoaded indicates an expected call of IsKernelModuleLoaded.
func (mr *MockInterfaceMockRecorder) IsKernelModuleLoaded(moduleName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsKernelModuleLoaded", reflect.TypeOf((*MockInterface)(nil).IsKernelModuleLoaded), moduleName)
}

// IsSriovPF mocks base method.
func (m *MockInterface) IsSriovPF(pciAddress string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsSriovPF", pciAddress)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsSriovPF indicates an expected call of IsSriovPF.
func (mr *MockInterfaceMockRecorder) IsSriovPF(pciAddress any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsSriovPF", reflect.TypeOf((*MockInterface)(nil).IsSriovPF), pciAddress)
}

// IsSriovVF mocks base method.
func (m *MockInterface) IsSriovVF(pciAddress string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsSriovVF", pciAddress)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsSriovVF indicates an expected call of IsSriovVF.
func (mr *MockInterfaceMockRecorder) IsSriovVF(pciAddress any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsSriovVF", reflect.TypeOf((*MockInterface)(nil).IsSriovVF), pciAddress)
}

// LoadKernelModule mocks base method.
func (m *MockInterface) LoadKernelModule(moduleName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadKernelModule", moduleName)
	ret0, _ := ret[0].(error)
	return ret0
}

// LoadKernelModule indicates an expected call of LoadKernelModule.
func (mr *MockInterfaceMockRecorder) LoadKernelModule(moduleName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadKernelModule", reflect.TypeOf((*MockInterface)(nil).LoadKernelModule), moduleName)
}

// PCI mocks base method.
func (m *MockInterface) PCI() (*ghw.PCIInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PCI")
	ret0, _ := ret[0].(*ghw.PCIInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PCI indicates an expected call of PCI.
func (mr *MockInterfaceMockRecorder) PCI() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PCI", reflect.TypeOf((*MockInterface)(nil).PCI))
}

// RestoreDeviceDriver mocks base method.
func (m *MockInterface) RestoreDeviceDriver(pciAddress, originalDriver string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreDeviceDriver", pciAddress, originalDriver)
	ret0, _ := ret[0].(error)
	return ret0
}

// RestoreDeviceDriver indicates an expected call of RestoreDeviceDriver.
func (mr *MockInterfaceMockRecorder) RestoreDeviceDriver(pciAddress, originalDriver any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreDeviceDriver", reflect.TypeOf((*MockInterface)(nil).RestoreDeviceDriver), pciAddress, originalDriver)
}

// TryGetInterfaceName mocks base method.
func (m *MockInterface) TryGetInterfaceName(pciAddr string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TryGetInterfaceName", pciAddr)
	ret0, _ := ret[0].(string)
	return ret0
}

// TryGetInterfaceName indicates an expected call of TryGetInterfaceName.
func (mr *MockInterfaceMockRecorder) TryGetInterfaceName(pciAddr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TryGetInterfaceName", reflect.TypeOf((*MockInterface)(nil).TryGetInterfaceName), pciAddr)
}

// UnbindDriverByBusAndDevice mocks base method.
func (m *MockInterface) UnbindDriverByBusAndDevice(device string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnbindDriverByBusAndDevice", device)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnbindDriverByBusAndDevice indicates an expected call of UnbindDriverByBusAndDevice.
func (mr *MockInterfaceMockRecorder) UnbindDriverByBusAndDevice(device any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnbindDriverByBusAndDevice", reflect.TypeOf((*MockInterface)(nil).UnbindDriverByBusAndDevice), device)
}
